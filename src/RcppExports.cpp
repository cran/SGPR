// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_loss
double get_loss(Rcpp::DoubleVector r, int n);
RcppExport SEXP _SGPR_get_loss(SEXP rSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(get_loss(r, n));
    return rcpp_result_gen;
END_RCPP
}
// xty
double xty(Rcpp::DoubleVector x, Rcpp::DoubleVector y, int n, int v);
RcppExport SEXP _SGPR_xty(SEXP xSEXP, SEXP ySEXP, SEXP nSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(xty(x, y, n, v));
    return rcpp_result_gen;
END_RCPP
}
// get_norm
double get_norm(Rcpp::DoubleVector X);
RcppExport SEXP _SGPR_get_norm(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(get_norm(X));
    return rcpp_result_gen;
END_RCPP
}
// lcdfit_linear
Rcpp::List lcdfit_linear(Rcpp::DoubleVector X, Rcpp::DoubleVector y, Rcpp::DoubleVector G1, int G0, Rcpp::DoubleVector lam, double alpha, double prec, double ada_mult, double g_gamma, double v_gamma, double g_tau, double v_tau, int max_iter, Rcpp::DoubleVector m, int own_l, int method_v, int method_g);
RcppExport SEXP _SGPR_lcdfit_linear(SEXP XSEXP, SEXP ySEXP, SEXP G1SEXP, SEXP G0SEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP precSEXP, SEXP ada_multSEXP, SEXP g_gammaSEXP, SEXP v_gammaSEXP, SEXP g_tauSEXP, SEXP v_tauSEXP, SEXP max_iterSEXP, SEXP mSEXP, SEXP own_lSEXP, SEXP method_vSEXP, SEXP method_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type G1(G1SEXP);
    Rcpp::traits::input_parameter< int >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< double >::type ada_mult(ada_multSEXP);
    Rcpp::traits::input_parameter< double >::type g_gamma(g_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type v_gamma(v_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type g_tau(g_tauSEXP);
    Rcpp::traits::input_parameter< double >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type own_l(own_lSEXP);
    Rcpp::traits::input_parameter< int >::type method_v(method_vSEXP);
    Rcpp::traits::input_parameter< int >::type method_g(method_gSEXP);
    rcpp_result_gen = Rcpp::wrap(lcdfit_linear(X, y, G1, G0, lam, alpha, prec, ada_mult, g_gamma, v_gamma, g_tau, v_tau, max_iter, m, own_l, method_v, method_g));
    return rcpp_result_gen;
END_RCPP
}
// inv_log_link
double inv_log_link(double logit);
RcppExport SEXP _SGPR_inv_log_link(SEXP logitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type logit(logitSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_log_link(logit));
    return rcpp_result_gen;
END_RCPP
}
// lcdfit_logistic
Rcpp::List lcdfit_logistic(Rcpp::DoubleVector X, Rcpp::DoubleVector y, Rcpp::DoubleVector G1, int G0, Rcpp::DoubleVector lam, double alpha, double prec, double ada_mult, double g_gamma, double v_gamma, double g_tau, double v_tau, int max_iter, Rcpp::DoubleVector m, int own_l, int method_v, int method_g);
RcppExport SEXP _SGPR_lcdfit_logistic(SEXP XSEXP, SEXP ySEXP, SEXP G1SEXP, SEXP G0SEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP precSEXP, SEXP ada_multSEXP, SEXP g_gammaSEXP, SEXP v_gammaSEXP, SEXP g_tauSEXP, SEXP v_tauSEXP, SEXP max_iterSEXP, SEXP mSEXP, SEXP own_lSEXP, SEXP method_vSEXP, SEXP method_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type G1(G1SEXP);
    Rcpp::traits::input_parameter< int >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type prec(precSEXP);
    Rcpp::traits::input_parameter< double >::type ada_mult(ada_multSEXP);
    Rcpp::traits::input_parameter< double >::type g_gamma(g_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type v_gamma(v_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type g_tau(g_tauSEXP);
    Rcpp::traits::input_parameter< double >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type own_l(own_lSEXP);
    Rcpp::traits::input_parameter< int >::type method_v(method_vSEXP);
    Rcpp::traits::input_parameter< int >::type method_g(method_gSEXP);
    rcpp_result_gen = Rcpp::wrap(lcdfit_logistic(X, y, G1, G0, lam, alpha, prec, ada_mult, g_gamma, v_gamma, g_tau, v_tau, max_iter, m, own_l, method_v, method_g));
    return rcpp_result_gen;
END_RCPP
}
// max_cor
double max_cor(Rcpp::DoubleVector X, Rcpp::DoubleVector y, Rcpp::DoubleVector K, Rcpp::DoubleVector m, double alpha);
RcppExport SEXP _SGPR_max_cor(SEXP XSEXP, SEXP ySEXP, SEXP KSEXP, SEXP mSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(max_cor(X, y, K, m, alpha));
    return rcpp_result_gen;
END_RCPP
}
// mcp
double mcp(double theta, double l, double gamma);
RcppExport SEXP _SGPR_mcp(SEXP thetaSEXP, SEXP lSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(mcp(theta, l, gamma));
    return rcpp_result_gen;
END_RCPP
}
// scad
double scad(double theta, double l, double gamma);
RcppExport SEXP _SGPR_scad(SEXP thetaSEXP, SEXP lSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(scad(theta, l, gamma));
    return rcpp_result_gen;
END_RCPP
}
// ep
double ep(double theta, double l, double tau);
RcppExport SEXP _SGPR_ep(SEXP thetaSEXP, SEXP lSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(ep(theta, l, tau));
    return rcpp_result_gen;
END_RCPP
}
// lasso
double lasso(double theta, double l);
RcppExport SEXP _SGPR_lasso(SEXP thetaSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(lasso(theta, l));
    return rcpp_result_gen;
END_RCPP
}
// approx
double approx(double l_v, double l_g, double g_tau, double v_tau, double g_gamma, double v_gamma, double old_b, double z_v, double g_norm, double g_norm_active, int method_v, int method_g);
RcppExport SEXP _SGPR_approx(SEXP l_vSEXP, SEXP l_gSEXP, SEXP g_tauSEXP, SEXP v_tauSEXP, SEXP g_gammaSEXP, SEXP v_gammaSEXP, SEXP old_bSEXP, SEXP z_vSEXP, SEXP g_normSEXP, SEXP g_norm_activeSEXP, SEXP method_vSEXP, SEXP method_gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type l_v(l_vSEXP);
    Rcpp::traits::input_parameter< double >::type l_g(l_gSEXP);
    Rcpp::traits::input_parameter< double >::type g_tau(g_tauSEXP);
    Rcpp::traits::input_parameter< double >::type v_tau(v_tauSEXP);
    Rcpp::traits::input_parameter< double >::type g_gamma(g_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type v_gamma(v_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type old_b(old_bSEXP);
    Rcpp::traits::input_parameter< double >::type z_v(z_vSEXP);
    Rcpp::traits::input_parameter< double >::type g_norm(g_normSEXP);
    Rcpp::traits::input_parameter< double >::type g_norm_active(g_norm_activeSEXP);
    Rcpp::traits::input_parameter< int >::type method_v(method_vSEXP);
    Rcpp::traits::input_parameter< int >::type method_g(method_gSEXP);
    rcpp_result_gen = Rcpp::wrap(approx(l_v, l_g, g_tau, v_tau, g_gamma, v_gamma, old_b, z_v, g_norm, g_norm_active, method_v, method_g));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SGPR_get_loss", (DL_FUNC) &_SGPR_get_loss, 2},
    {"_SGPR_xty", (DL_FUNC) &_SGPR_xty, 4},
    {"_SGPR_get_norm", (DL_FUNC) &_SGPR_get_norm, 1},
    {"_SGPR_lcdfit_linear", (DL_FUNC) &_SGPR_lcdfit_linear, 17},
    {"_SGPR_inv_log_link", (DL_FUNC) &_SGPR_inv_log_link, 1},
    {"_SGPR_lcdfit_logistic", (DL_FUNC) &_SGPR_lcdfit_logistic, 17},
    {"_SGPR_max_cor", (DL_FUNC) &_SGPR_max_cor, 5},
    {"_SGPR_mcp", (DL_FUNC) &_SGPR_mcp, 3},
    {"_SGPR_scad", (DL_FUNC) &_SGPR_scad, 3},
    {"_SGPR_ep", (DL_FUNC) &_SGPR_ep, 3},
    {"_SGPR_lasso", (DL_FUNC) &_SGPR_lasso, 2},
    {"_SGPR_approx", (DL_FUNC) &_SGPR_approx, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_SGPR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
